{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":18858,"sourceType":"datasetVersion","datasetId":13996}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/richardwarepam/telecon-customer-churn-86-2-eda-feat-eng?scriptVersionId=191140586\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Customer Churn Prediction Model: A Data Science Project\n\n## About the Author:\n\nHello readers, I am [Richard Warepam](https://richardwarepam.carrd.com/). I am currently a **Software Developer** at TCS. But, **I am very passionate about Data Science and AI.** \n\n- I am a 2 x [Top Technical Writer at Medium](https://warepam.medium.com/). Here, I write contents around **Data Science** and **AI** and **the only purpose is to teach my readers in the easiest way possible**.\n\n- **You can also Checkout my most-read eBooks:**  üõí [My Gumroad Shop](https://codewarepam.gumroad.com/)\n\n\n## Contents\n\n- Introduction\n- Project Overview\n- Data Exploration\n- Data Preprocessing\n- Feature Engineering\n- Model Building\n- Model Evaluation\n- Results and Insights\n- Conclusion\n\n## Introduction\n\nCustomer churn, the phenomenon where customers stop doing business with a company, is a critical concern for many industries. Predicting which customers are likely to churn can help businesses take proactive measures to retain them. \n\nüéØ **Goal** - This project demonstrates how to build a machine learning model to predict customer churn using a telecommunications company dataset.\n\n## Project Overview\n\n### üìç Objective\n\nTo develop a predictive model that can identify customers at risk of churning, allowing the company to take targeted retention actions.\n\n### üìÑ Dataset\n\nThe dataset used is from a telecommunications company, containing various customer attributes and their churn status.\n\n### ‚öôÔ∏è Tools and Libraries\n\n- Python\n- Pandas for data manipulation\n- Matplotlib and Seaborn for data visualization\n- Scikit-learn for machine learning models","metadata":{}},{"cell_type":"markdown","source":"## Data Exploration\n\n### Loading and Inspecting the Data\n\nWe start by loading the dataset and examining its structure:","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:36.138138Z","iopub.execute_input":"2024-08-04T09:36:36.138594Z","iopub.status.idle":"2024-08-04T09:36:37.213013Z","shell.execute_reply.started":"2024-08-04T09:36:36.138548Z","shell.execute_reply":"2024-08-04T09:36:37.211573Z"}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\ndata.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.220248Z","iopub.execute_input":"2024-08-04T09:36:37.220655Z","iopub.status.idle":"2024-08-04T09:36:37.315952Z","shell.execute_reply.started":"2024-08-04T09:36:37.220621Z","shell.execute_reply":"2024-08-04T09:36:37.314505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.317872Z","iopub.execute_input":"2024-08-04T09:36:37.318461Z","iopub.status.idle":"2024-08-04T09:36:37.328598Z","shell.execute_reply.started":"2024-08-04T09:36:37.318409Z","shell.execute_reply":"2024-08-04T09:36:37.327462Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.332158Z","iopub.execute_input":"2024-08-04T09:36:37.333169Z","iopub.status.idle":"2024-08-04T09:36:37.367169Z","shell.execute_reply.started":"2024-08-04T09:36:37.333104Z","shell.execute_reply":"2024-08-04T09:36:37.365576Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"In the description info above, we see that the data type of \"Total Charges\" is Object. But, we need it as \"float\". So, we need to convert that here.","metadata":{}},{"cell_type":"code","source":"data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.369083Z","iopub.execute_input":"2024-08-04T09:36:37.369539Z","iopub.status.idle":"2024-08-04T09:36:37.384489Z","shell.execute_reply.started":"2024-08-04T09:36:37.369452Z","shell.execute_reply":"2024-08-04T09:36:37.382941Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.38698Z","iopub.execute_input":"2024-08-04T09:36:37.387548Z","iopub.status.idle":"2024-08-04T09:36:37.419279Z","shell.execute_reply.started":"2024-08-04T09:36:37.387503Z","shell.execute_reply":"2024-08-04T09:36:37.417924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.describe(exclude = 'object')","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.421228Z","iopub.execute_input":"2024-08-04T09:36:37.42177Z","iopub.status.idle":"2024-08-04T09:36:37.45698Z","shell.execute_reply.started":"2024-08-04T09:36:37.421728Z","shell.execute_reply":"2024-08-04T09:36:37.45472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This gives us an initial view of the dataset, including customer demographics, services subscribed, and contract information.","metadata":{}},{"cell_type":"markdown","source":"## Data Pre-processing\n\n#### Checking for missing values:","metadata":{}},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.460232Z","iopub.execute_input":"2024-08-04T09:36:37.461257Z","iopub.status.idle":"2024-08-04T09:36:37.490192Z","shell.execute_reply.started":"2024-08-04T09:36:37.461205Z","shell.execute_reply":"2024-08-04T09:36:37.488046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We found 11 missing values in the 'TotalCharges' column.","metadata":{}},{"cell_type":"markdown","source":"We need to know the reason why the data are missing. So, we need to have a look at the missing values.\n\nSee, if Total Charges is missing, one of the reason may be because, the tenure is '0'. Because:\n\n- **Total Charges = Tenure * Monthly Charges**\n\n##### Hence, let's look at the tenure value of the missing Total Charges.","metadata":{}},{"cell_type":"code","source":"missing_rows = data[data['TotalCharges'].isnull()]\nmissing_rows['tenure']","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.493044Z","iopub.execute_input":"2024-08-04T09:36:37.493629Z","iopub.status.idle":"2024-08-04T09:36:37.507699Z","shell.execute_reply.started":"2024-08-04T09:36:37.493579Z","shell.execute_reply":"2024-08-04T09:36:37.50626Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Handling missing values\n\nNow, we know the tenure is '0' and that is why the total charges is missing. \n\nWe can fix this by assigning '0.0' as a value to all the missing ones.","metadata":{}},{"cell_type":"code","source":"data.loc[(data['TotalCharges'].isnull()) & (data['tenure'] == 0), 'TotalCharges'] = 0.0\n#If Tenure = 0; TotalCharges = 0","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.50946Z","iopub.execute_input":"2024-08-04T09:36:37.509839Z","iopub.status.idle":"2024-08-04T09:36:37.518527Z","shell.execute_reply.started":"2024-08-04T09:36:37.509806Z","shell.execute_reply":"2024-08-04T09:36:37.517122Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.520274Z","iopub.execute_input":"2024-08-04T09:36:37.520721Z","iopub.status.idle":"2024-08-04T09:36:37.552205Z","shell.execute_reply.started":"2024-08-04T09:36:37.520676Z","shell.execute_reply":"2024-08-04T09:36:37.550581Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Encoding target variable","metadata":{}},{"cell_type":"code","source":"data['Churn'] = data['Churn'].map({'Yes': 1, 'No': 0}) #Converting Churn into Numerical\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.554229Z","iopub.execute_input":"2024-08-04T09:36:37.554664Z","iopub.status.idle":"2024-08-04T09:36:37.592784Z","shell.execute_reply.started":"2024-08-04T09:36:37.554628Z","shell.execute_reply":"2024-08-04T09:36:37.591269Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## EDA(Exploratory Data Analysis)","metadata":{}},{"cell_type":"markdown","source":"### Univariate Analtsis","metadata":{}},{"cell_type":"code","source":"categorical_vars = ['gender','Partner','Dependents','PhoneService','MultipleLines','InternetService','OnlineSecurity','OnlineBackup',\n                    'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling','PaymentMethod']\n\nfor vars in categorical_vars:\n    print(data[vars].unique())","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.600067Z","iopub.execute_input":"2024-08-04T09:36:37.600582Z","iopub.status.idle":"2024-08-04T09:36:37.626085Z","shell.execute_reply.started":"2024-08-04T09:36:37.600544Z","shell.execute_reply":"2024-08-04T09:36:37.624489Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"numerical_vars = ['tenure', 'MonthlyCharges', 'TotalCharges']","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.628565Z","iopub.execute_input":"2024-08-04T09:36:37.629096Z","iopub.status.idle":"2024-08-04T09:36:37.63538Z","shell.execute_reply.started":"2024-08-04T09:36:37.629053Z","shell.execute_reply":"2024-08-04T09:36:37.633801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Distribution of numerical variables","metadata":{}},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 3, figsize=(20, 5))\nfor i, var in enumerate(numerical_vars):\n    sns.histplot(data[var], kde=True, ax=axes[i])\n    axes[i].set_title(f'Distribution of {var}')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:37.637521Z","iopub.execute_input":"2024-08-04T09:36:37.638445Z","iopub.status.idle":"2024-08-04T09:36:39.269708Z","shell.execute_reply.started":"2024-08-04T09:36:37.638408Z","shell.execute_reply":"2024-08-04T09:36:39.26653Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 3, figsize=(20, 5))\nfor i, var in enumerate(numerical_vars):\n    sns.boxplot(x=data[var], ax=axes[i])\n    axes[i].set_title(f'Box Plot of {var}')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:39.272622Z","iopub.execute_input":"2024-08-04T09:36:39.273176Z","iopub.status.idle":"2024-08-04T09:36:39.914073Z","shell.execute_reply.started":"2024-08-04T09:36:39.273129Z","shell.execute_reply":"2024-08-04T09:36:39.912355Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['SeniorCitizen'] = data['SeniorCitizen'].map({0: 'No', 1: 'Yes'})","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:39.915977Z","iopub.execute_input":"2024-08-04T09:36:39.916394Z","iopub.status.idle":"2024-08-04T09:36:39.924747Z","shell.execute_reply.started":"2024-08-04T09:36:39.916363Z","shell.execute_reply":"2024-08-04T09:36:39.922992Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Categorical variable analysis","metadata":{}},{"cell_type":"code","source":"categorical_vars = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', \n                    'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', \n                    'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', \n                    'Contract', 'PaperlessBilling', 'PaymentMethod']","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:39.926705Z","iopub.execute_input":"2024-08-04T09:36:39.927202Z","iopub.status.idle":"2024-08-04T09:36:39.939779Z","shell.execute_reply.started":"2024-08-04T09:36:39.92716Z","shell.execute_reply":"2024-08-04T09:36:39.938327Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(4, 4, figsize=(20, 20))\naxes = axes.flatten()\nfor i, var in enumerate(categorical_vars):\n    sns.countplot(x=var, data=data, ax=axes[i])\n    axes[i].set_title(f'Distribution of {var}')\n    axes[i].tick_params(axis='x', rotation=45)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:39.941549Z","iopub.execute_input":"2024-08-04T09:36:39.942469Z","iopub.status.idle":"2024-08-04T09:36:43.534053Z","shell.execute_reply.started":"2024-08-04T09:36:39.942425Z","shell.execute_reply":"2024-08-04T09:36:43.532459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Bivariate Analysis","metadata":{}},{"cell_type":"markdown","source":"#### Numerical Data vs Target Data","metadata":{}},{"cell_type":"code","source":"fig, axes = plt.subplots(1, 3, figsize=(20, 5))\nfor i, var in enumerate(numerical_vars):\n    sns.boxplot(x='Churn', y=var, data=data, ax=axes[i])\n    axes[i].set_title(f'{var} vs Churn')\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:43.53576Z","iopub.execute_input":"2024-08-04T09:36:43.536157Z","iopub.status.idle":"2024-08-04T09:36:44.659348Z","shell.execute_reply.started":"2024-08-04T09:36:43.536126Z","shell.execute_reply":"2024-08-04T09:36:44.657651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Categorical Data vs Target Data","metadata":{}},{"cell_type":"code","source":"fig, axes = plt.subplots(4, 4, figsize=(20, 20))\naxes = axes.flatten()\nfor i, var in enumerate(categorical_vars):\n    sns.countplot(x=var, hue='Churn', data=data, ax=axes[i])\n    axes[i].set_title(f'{var} vs Churn')\n    axes[i].tick_params(axis='x', rotation=45)\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:44.661344Z","iopub.execute_input":"2024-08-04T09:36:44.66186Z","iopub.status.idle":"2024-08-04T09:36:49.206874Z","shell.execute_reply.started":"2024-08-04T09:36:44.661816Z","shell.execute_reply":"2024-08-04T09:36:49.204943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Multivariate Analysis","metadata":{}},{"cell_type":"markdown","source":"#### Correlation Analysis","metadata":{}},{"cell_type":"code","source":"corr_matrix = data[numerical_vars + ['Churn']].corr()\nplt.figure(figsize=(10, 8))\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0)\nplt.title('Correlation Matrix of Numerical Variables')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:49.208827Z","iopub.execute_input":"2024-08-04T09:36:49.209309Z","iopub.status.idle":"2024-08-04T09:36:49.673953Z","shell.execute_reply.started":"2024-08-04T09:36:49.209272Z","shell.execute_reply":"2024-08-04T09:36:49.672525Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Feature Engineering for EDA\ndata['CLV'] = data['tenure'] * data['MonthlyCharges']","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:49.675962Z","iopub.execute_input":"2024-08-04T09:36:49.676472Z","iopub.status.idle":"2024-08-04T09:36:49.684057Z","shell.execute_reply.started":"2024-08-04T09:36:49.676427Z","shell.execute_reply":"2024-08-04T09:36:49.682547Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.scatterplot(x='CLV', y='MonthlyCharges', hue='Churn', data=data)\nplt.title('Customer Lifetime Value vs Monthly Charges')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:49.68656Z","iopub.execute_input":"2024-08-04T09:36:49.687306Z","iopub.status.idle":"2024-08-04T09:36:50.4985Z","shell.execute_reply.started":"2024-08-04T09:36:49.68707Z","shell.execute_reply":"2024-08-04T09:36:50.496592Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Domain Knowledge : Churn Rate Analysis\n\nHere, we know in this project, the Churn Rate may be very much affected by its \"Contract type\" and the \"Tenure\".\n\nSo, Let's have a look at their relationship.\n","metadata":{}},{"cell_type":"code","source":"data['TenureBin'] = pd.cut(data['tenure'], bins=[0, 12, 24, 36, 48, 60, np.inf], labels=['0-1 Year', '1-2 Years', '2-3 Years', '3-4 Years', '4-5 Years', '5+ Years'])","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:50.501139Z","iopub.execute_input":"2024-08-04T09:36:50.501669Z","iopub.status.idle":"2024-08-04T09:36:50.514182Z","shell.execute_reply.started":"2024-08-04T09:36:50.501629Z","shell.execute_reply":"2024-08-04T09:36:50.512834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"churn_by_contract_tenure = data.groupby(['Contract', 'TenureBin'])['Churn'].mean().unstack()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:50.516054Z","iopub.execute_input":"2024-08-04T09:36:50.516435Z","iopub.status.idle":"2024-08-04T09:36:50.537542Z","shell.execute_reply.started":"2024-08-04T09:36:50.516402Z","shell.execute_reply":"2024-08-04T09:36:50.53565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(12, 6))\nchurn_by_contract_tenure.plot(kind='bar', stacked=False)\nplt.title('Churn Rate by Contract Type and Tenure')\nplt.xlabel('Contract Type')\nplt.ylabel('Churn Rate')\nplt.legend(title='Tenure')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:50.53964Z","iopub.execute_input":"2024-08-04T09:36:50.540181Z","iopub.status.idle":"2024-08-04T09:36:51.248966Z","shell.execute_reply.started":"2024-08-04T09:36:50.540143Z","shell.execute_reply":"2024-08-04T09:36:51.247419Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = data.drop('Churn', axis = 1)\nY = data['Churn']","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.250825Z","iopub.execute_input":"2024-08-04T09:36:51.251785Z","iopub.status.idle":"2024-08-04T09:36:51.261431Z","shell.execute_reply.started":"2024-08-04T09:36:51.251742Z","shell.execute_reply":"2024-08-04T09:36:51.260159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Feature preprocessing:\n\nWe used ColumnTransformer and Pipeline from scikit-learn to preprocess our features:\n\n1. **Numeric features**: Imputation and StandardScaler\n2. **Categorical features**: Imputation and OneHotEncoder","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.263092Z","iopub.execute_input":"2024-08-04T09:36:51.263551Z","iopub.status.idle":"2024-08-04T09:36:51.415971Z","shell.execute_reply.started":"2024-08-04T09:36:51.263498Z","shell.execute_reply":"2024-08-04T09:36:51.414569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state= 42)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.417737Z","iopub.execute_input":"2024-08-04T09:36:51.41826Z","iopub.status.idle":"2024-08-04T09:36:51.436104Z","shell.execute_reply.started":"2024-08-04T09:36:51.418214Z","shell.execute_reply":"2024-08-04T09:36:51.434337Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"numeric_transformer = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())\n])","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.43822Z","iopub.execute_input":"2024-08-04T09:36:51.438728Z","iopub.status.idle":"2024-08-04T09:36:51.446524Z","shell.execute_reply.started":"2024-08-04T09:36:51.438683Z","shell.execute_reply":"2024-08-04T09:36:51.444987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"categorical_transformer = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'constant', fill_value = 'missing')),\n    ('onehot', OneHotEncoder(drop = 'first', sparse = False, handle_unknown= 'ignore'))\n])","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.448496Z","iopub.execute_input":"2024-08-04T09:36:51.44899Z","iopub.status.idle":"2024-08-04T09:36:51.459831Z","shell.execute_reply.started":"2024-08-04T09:36:51.448949Z","shell.execute_reply":"2024-08-04T09:36:51.458545Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preprocessor = ColumnTransformer(transformers = [\n    ('num', numeric_transformer, numerical_vars),\n    ('cat', categorical_transformer, categorical_vars)\n])","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.461672Z","iopub.execute_input":"2024-08-04T09:36:51.462161Z","iopub.status.idle":"2024-08-04T09:36:51.473787Z","shell.execute_reply.started":"2024-08-04T09:36:51.462121Z","shell.execute_reply":"2024-08-04T09:36:51.47236Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_preprocessed = preprocessor.fit_transform(X_train)\nX_test_preprocessed = preprocessor.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.475741Z","iopub.execute_input":"2024-08-04T09:36:51.476318Z","iopub.status.idle":"2024-08-04T09:36:51.589983Z","shell.execute_reply.started":"2024-08-04T09:36:51.476275Z","shell.execute_reply":"2024-08-04T09:36:51.588631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Getting features names after Processing\nonehot_encoder = preprocessor.named_transformers_['cat'].named_steps['onehot']\ncat_feature_names = onehot_encoder.get_feature_names_out(categorical_vars)\nfeature_names = numerical_vars + list(cat_feature_names)\n\nprint(feature_names)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.591872Z","iopub.execute_input":"2024-08-04T09:36:51.592383Z","iopub.status.idle":"2024-08-04T09:36:51.600741Z","shell.execute_reply.started":"2024-08-04T09:36:51.592343Z","shell.execute_reply":"2024-08-04T09:36:51.599276Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_preprocessed = pd.DataFrame(X_train_preprocessed, columns = feature_names)\nX_test_preprocessed = pd.DataFrame(X_test_preprocessed, columns = feature_names)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.602495Z","iopub.execute_input":"2024-08-04T09:36:51.603282Z","iopub.status.idle":"2024-08-04T09:36:51.614295Z","shell.execute_reply.started":"2024-08-04T09:36:51.603243Z","shell.execute_reply":"2024-08-04T09:36:51.612863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_preprocessed.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.617097Z","iopub.execute_input":"2024-08-04T09:36:51.618263Z","iopub.status.idle":"2024-08-04T09:36:51.658747Z","shell.execute_reply.started":"2024-08-04T09:36:51.618197Z","shell.execute_reply":"2024-08-04T09:36:51.657284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test_preprocessed.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.660629Z","iopub.execute_input":"2024-08-04T09:36:51.661012Z","iopub.status.idle":"2024-08-04T09:36:51.699649Z","shell.execute_reply.started":"2024-08-04T09:36:51.660977Z","shell.execute_reply":"2024-08-04T09:36:51.698102Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_preprocessed.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.701498Z","iopub.execute_input":"2024-08-04T09:36:51.701961Z","iopub.status.idle":"2024-08-04T09:36:51.714247Z","shell.execute_reply.started":"2024-08-04T09:36:51.701929Z","shell.execute_reply":"2024-08-04T09:36:51.7128Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_test_preprocessed.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.724346Z","iopub.execute_input":"2024-08-04T09:36:51.725355Z","iopub.status.idle":"2024-08-04T09:36:51.73427Z","shell.execute_reply.started":"2024-08-04T09:36:51.725313Z","shell.execute_reply":"2024-08-04T09:36:51.732745Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Feature Engineering\n\nWe created two new features:\n\n- **Customer Lifetime Value (CLV):** \n\nCLV = tenure * MonthlyCharges\n\n- **Average Monthly Charges:** \n\nAvgMonthlyCharges = TotalCharges / tenure\n\nThese new features were then scaled using StandardScaler.","metadata":{}},{"cell_type":"code","source":"def features_engineer(data):\n    \n    data['CLV'] = data['tenure'] * data['MonthlyCharges']\n    \n    data['AvgMonthlyCharges'] = data['TotalCharges'] / data['tenure']\n    data['AvgMonthlyCharges'].fillna(data['MonthlyCharges'], inplace = True)\n    \n    return data","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.736619Z","iopub.execute_input":"2024-08-04T09:36:51.737103Z","iopub.status.idle":"2024-08-04T09:36:51.748071Z","shell.execute_reply.started":"2024-08-04T09:36:51.73706Z","shell.execute_reply":"2024-08-04T09:36:51.746Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train = features_engineer(X_train_preprocessed)\nX_test = features_engineer(X_test_preprocessed)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.750514Z","iopub.execute_input":"2024-08-04T09:36:51.751966Z","iopub.status.idle":"2024-08-04T09:36:51.768707Z","shell.execute_reply.started":"2024-08-04T09:36:51.751917Z","shell.execute_reply":"2024-08-04T09:36:51.766907Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Scaling new numerical features\nnew_numeric_features = ['CLV','AvgMonthlyCharges']\nscaler = StandardScaler()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.770633Z","iopub.execute_input":"2024-08-04T09:36:51.771222Z","iopub.status.idle":"2024-08-04T09:36:51.778665Z","shell.execute_reply.started":"2024-08-04T09:36:51.771175Z","shell.execute_reply":"2024-08-04T09:36:51.777226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train[new_numeric_features] = scaler.fit_transform(X_train[new_numeric_features])\nX_test[new_numeric_features] = scaler.transform(X_test[new_numeric_features])","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.780711Z","iopub.execute_input":"2024-08-04T09:36:51.781196Z","iopub.status.idle":"2024-08-04T09:36:51.806147Z","shell.execute_reply.started":"2024-08-04T09:36:51.781156Z","shell.execute_reply":"2024-08-04T09:36:51.804394Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.columns","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.807974Z","iopub.execute_input":"2024-08-04T09:36:51.80842Z","iopub.status.idle":"2024-08-04T09:36:51.819343Z","shell.execute_reply.started":"2024-08-04T09:36:51.808388Z","shell.execute_reply":"2024-08-04T09:36:51.816688Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.821318Z","iopub.execute_input":"2024-08-04T09:36:51.821763Z","iopub.status.idle":"2024-08-04T09:36:51.864767Z","shell.execute_reply.started":"2024-08-04T09:36:51.821733Z","shell.execute_reply":"2024-08-04T09:36:51.863197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Building\n\nWe built and compared several classification models:\n\n1. Logistic Regression\n2. Decision Tree\n3. Random Forest\n4. Gradient Boosting\n5. Support Vector Machine (SVM)","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,roc_auc_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.866719Z","iopub.execute_input":"2024-08-04T09:36:51.86732Z","iopub.status.idle":"2024-08-04T09:36:51.908283Z","shell.execute_reply.started":"2024-08-04T09:36:51.867215Z","shell.execute_reply":"2024-08-04T09:36:51.906778Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def train_and_evaluate(model, X_train, X_test, Y_train, Y_test):\n    \n    model.fit(X_train, Y_train)\n    \n    y_pred = model.predict(X_test)\n    y_pred_proba = model.predict_proba(X_test)[:,1]\n    \n    accuracy = accuracy_score(Y_test, y_pred)\n    precision = precision_score(Y_test, y_pred)\n    recall = recall_score(Y_test, y_pred)\n    f1 = f1_score(Y_test, y_pred)\n    roc_auc = roc_auc_score(Y_test, y_pred_proba)\n    \n    cv_scores = cross_val_score(model, X_train, Y_train, cv = 5, scoring='roc_auc')\n    \n    return {\n        'accuracy' : accuracy,\n        'precision' : precision,\n        'recall' : recall,\n        'f1' : f1,\n        'roc_auc' : roc_auc,\n        'cv_roc_auc_mean' : cv_scores.mean(),\n        'cv_roc_auc_std' : cv_scores.std()\n    }\n","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.910073Z","iopub.execute_input":"2024-08-04T09:36:51.910632Z","iopub.status.idle":"2024-08-04T09:36:51.922144Z","shell.execute_reply.started":"2024-08-04T09:36:51.910586Z","shell.execute_reply":"2024-08-04T09:36:51.920354Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"models = {\n    'Logistiic Regression': LogisticRegression(random_state=42),\n    'Decision Tree': DecisionTreeClassifier(random_state=42),\n    'Random Forest': RandomForestClassifier(random_state=42),\n    'Gradient Boosting': GradientBoostingClassifier(random_state=42),\n    'SVM': SVC(probability=True, random_state=42)\n}","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.923637Z","iopub.execute_input":"2024-08-04T09:36:51.924114Z","iopub.status.idle":"2024-08-04T09:36:51.93528Z","shell.execute_reply.started":"2024-08-04T09:36:51.924062Z","shell.execute_reply":"2024-08-04T09:36:51.933658Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = {}\n\nfor name, model in models.items():\n    print(f\"Training {name}...\")\n    results[name] = train_and_evaluate(model, X_train, X_test, Y_train, Y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:36:51.937289Z","iopub.execute_input":"2024-08-04T09:36:51.93783Z","iopub.status.idle":"2024-08-04T09:37:32.287117Z","shell.execute_reply.started":"2024-08-04T09:36:51.937784Z","shell.execute_reply":"2024-08-04T09:37:32.285485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for name, metrics in results.items():\n    print(f\"\\n {name} Results:\")\n    for metrics, value in metrics.items():\n        print(f\"{metrics}: {value: .4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:32.289403Z","iopub.execute_input":"2024-08-04T09:37:32.289815Z","iopub.status.idle":"2024-08-04T09:37:32.296987Z","shell.execute_reply.started":"2024-08-04T09:37:32.289783Z","shell.execute_reply":"2024-08-04T09:37:32.29546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Model Evaluation\n\nWe evaluated our models using several metrics:\n\n- Accuracy\n- Precision\n- Recall\n- F1-score\n- ROC AUC score\n\nWe also performed cross-validation to ensure the robustness of our models.\n\nAdditionally, we visualized the performance of our models using:\n\n1. Confusion Matrices\n2. ROC curves\n3. Precision-Recall curves","metadata":{}},{"cell_type":"code","source":"def evaluate_model(model, X, y, name):\n    y_pred = model.predict(X)\n    y_pred_proba = model.predict_proba(X)[:, 1]\n    \n    print(f\"Evaluation metrics for {name}:\")\n    print(f\"Accuracy: {accuracy_score(y, y_pred):.4f}\")\n    print(f\"Precision: {precision_score(y, y_pred):.4f}\")\n    print(f\"Recall: {recall_score(y, y_pred):.4f}\")\n    print(f\"F1-score: {f1_score(y, y_pred):.4f}\")\n    print(f\"ROC AUC: {roc_auc_score(y, y_pred_proba):.4f}\")\n    \n    # Confusion Matrix\n    cm = confusion_matrix(y, y_pred)\n    plt.figure(figsize=(8, 6))\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.title(f'Confusion Matrix - {name}')\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()\n\n# Evaluate models on test set\nfor name, model in models.items():\n    evaluate_model(model, X_test, Y_test, name)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:32.299309Z","iopub.execute_input":"2024-08-04T09:37:32.2997Z","iopub.status.idle":"2024-08-04T09:37:34.669158Z","shell.execute_reply.started":"2024-08-04T09:37:32.29967Z","shell.execute_reply":"2024-08-04T09:37:34.667819Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import roc_curve, auc, precision_recall_curve, average_precision_score\nfrom itertools import cycle","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:34.671675Z","iopub.execute_input":"2024-08-04T09:37:34.672191Z","iopub.status.idle":"2024-08-04T09:37:34.67964Z","shell.execute_reply.started":"2024-08-04T09:37:34.672148Z","shell.execute_reply":"2024-08-04T09:37:34.677875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_roc_curves(models, X, y):\n    plt.figure(figsize=(10, 8))\n    colors = cycle(['blue', 'red', 'green','black','yellow'])\n    \n    for (name, model), color in zip(models.items(), colors):\n        y_pred_proba = model.predict_proba(X)[:, 1]\n        fpr, tpr, _ = roc_curve(y, y_pred_proba)\n        roc_auc = auc(fpr, tpr)\n        \n        plt.plot(fpr, tpr, color=color, lw=2,\n                 label=f'{name} (AUC = {roc_auc:.2f})')\n    \n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend(loc=\"lower right\")\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:34.681325Z","iopub.execute_input":"2024-08-04T09:37:34.681746Z","iopub.status.idle":"2024-08-04T09:37:34.695098Z","shell.execute_reply.started":"2024-08-04T09:37:34.681714Z","shell.execute_reply":"2024-08-04T09:37:34.69355Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_precision_recall_curves(models, X, y):\n    plt.figure(figsize=(10, 8))\n    colors = cycle(['blue', 'red', 'green','black', 'yellow'])\n    \n    for (name, model), color in zip(models.items(), colors):\n        y_pred_proba = model.predict_proba(X)[:, 1]\n        precision, recall, _ = precision_recall_curve(y, y_pred_proba)\n        average_precision = average_precision_score(y, y_pred_proba)\n        \n        plt.plot(recall, precision, color=color, lw=2,\n                 label=f'{name} (AP = {average_precision:.2f})')\n    \n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.title('Precision-Recall Curve')\n    plt.legend(loc=\"lower left\")\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:34.696904Z","iopub.execute_input":"2024-08-04T09:37:34.697342Z","iopub.status.idle":"2024-08-04T09:37:34.709383Z","shell.execute_reply.started":"2024-08-04T09:37:34.697297Z","shell.execute_reply":"2024-08-04T09:37:34.707844Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_roc_curves(models, X_test, Y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:34.711292Z","iopub.execute_input":"2024-08-04T09:37:34.711698Z","iopub.status.idle":"2024-08-04T09:37:35.509128Z","shell.execute_reply.started":"2024-08-04T09:37:34.711666Z","shell.execute_reply":"2024-08-04T09:37:35.507663Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plot_precision_recall_curves(models, X_test, Y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:35.51075Z","iopub.execute_input":"2024-08-04T09:37:35.5112Z","iopub.status.idle":"2024-08-04T09:37:36.242353Z","shell.execute_reply.started":"2024-08-04T09:37:35.511158Z","shell.execute_reply":"2024-08-04T09:37:36.240772Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_model = max(results, key = lambda x: results[x]['roc_auc'])\n\nprint(f\"\\n Best Model: {best_model}\")\nprint(f\"Best ROC AUC: {results[best_model]['roc_auc']:.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-04T09:37:36.244723Z","iopub.execute_input":"2024-08-04T09:37:36.245224Z","iopub.status.idle":"2024-08-04T09:37:36.253048Z","shell.execute_reply.started":"2024-08-04T09:37:36.245182Z","shell.execute_reply":"2024-08-04T09:37:36.251352Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Results and Insights\n\nAfter evaluating all models, we found that the **Logistic Regression** model performed the best with an **ROC AUC score of 0.8620**.\n\n#### Key findings:\n\n- Contract type is a strong predictor of churn. Customers on month-to-month contracts are more likely to churn.\n- Customers with higher monthly charges and lower tenure are more prone to churning.\n- The presence of certain services (like online security and tech support) correlates with lower churn rates.\n\n## Conclusion\n\nThis project demonstrated the process of building a customer churn prediction model, from data exploration to model evaluation. \n\n> **The Logistic Regression model proved to be the most effective for this dataset, but the choice of model may vary depending on the specific business context and data characteristics.**\n\n### Next steps could include:\n\n- Feature importance analysis to identify the most influential factors in churn prediction.\n- Hyperparameter tuning to potentially improve model performance.\n- Developing a deployment strategy to integrate the model into the business workflow.\n\nBy predicting customer churn, the telecom company can now take proactive measures to retain at-risk customers, potentially saving significant revenue and improving customer satisfaction.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}